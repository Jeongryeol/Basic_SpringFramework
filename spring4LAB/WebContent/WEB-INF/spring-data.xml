<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 프레임워크에서 자바소스로 존재하지 않는 클래스를 주입받아야할때, 생성자주입법으로 받아야한다.-->
<!-- ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── -->
<!--스파이 / lib폴더에 p6spy.jar / src폴더에 spy.properties  -->
	<bean id="data-source" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="data-source-target"/>
	</bean>
<!-- ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── -->
<!--DB에 접속하는 업무를 담당하는 xml페이지 -->
<!--
	[1] Connection Pull 대상으로 설정하는 방법 : Jeus, Webspere(IBM)
	- 권장방식 : JNDI(Java Naming and Directory Interface)	-->
<!-- 
	<bean id="data-source-targetV2" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>jdbc/dbPool</value>
		</property>
		<property name="resourceRef">
			<value>true</value>
		</property>
	</bean>
-->
<!--
	[2] JDBC로 설정하는 기본방법 : 개발자의 의도대로 전개할 수 있는 방식 -->
	<bean id="data-source-target" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<!-- setter메소드로 객체주입이 일어나므로 name을 함부로 수정하면 위험하다 -->
		<property name="driverClassName">
			<value>oracle.jdbc.OracleDriver</value>
		</property>
		<property name="url">
			<value>jdbc:oracle:thin:@localhost:1521:orcl11</value>
		<!--<value>jdbc:oracle:oci:@localhost:1521:orcl11</value> 동시접속자가 많은 웹서비스에 적합하지 않은 oci방식은 배제 -->
		</property>
		<property name="username"><!-- public void setUserName(){} -->
			<value>jsp</value>
		</property>
		<property name="password">
			<value>1234</value>
		</property>
	</bean>
<!-- ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── -->
	<!-- Logic Transaction 처리하는 코드 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="data-source"/>
	</bean>
<!-- ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── -->
	<!-- Mabatis Layer config :: 이종간의 객체 주입하는 코드 -->
	<!-- DB Connection 만들기 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mapper를 알고있는 xml문서를 참조함. 왜?xml(mybatis-config.xml)에서 xml(member.xml)을 참조해야함 -->
		<property name="configLocation" value="WEB-INF/mybatis-config.xml"/>
		<!-- 커넥션을 위한 DB접속정보 -->
		<!-- <property name="dataSource" ref="data-source-target"/> -->
		<property name="dataSource" ref="data-source"/>
	</bean>
	<!-- SqlSession 만들기 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 생성자 주입법 -->
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	<!-- Logic에서 사용할 Dao클래스에 SqlSession을 주입함 -->
	<bean id="sql-member-dao" class="com.compare_pojo.SqlMemberDao">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate"/><!-- setter메소드가 없으면 에러가 발생함 -->
	</bean>
<!-- ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── -->
	<bean id="sql-board-dao" class="com.di.SqlBoardDao">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate"/><!-- setter메소드가 없으면 에러가 발생함 -->
	</bean>
</beans>
