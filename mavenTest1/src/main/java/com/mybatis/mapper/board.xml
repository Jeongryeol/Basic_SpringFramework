<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.boardMapper">

<!-- ────[VO클래스를 myBatis로 매핑하는 구간ㅌ : 메뉴얼 51페이지]──────────────────────────────────────────────────────────────────────── -->	
	<!-- 부모테이블 VO 파라미터Map사전설정 -->
	<parameterMap id="pBMVO" type="com.vo.BoardMasterVO">
		<parameter property="b_no"		javaType="int" mode="IN"/>
		<parameter property="b_title"	javaType="java.lang.String" mode="IN"/>
		<parameter property="b_name"	javaType="java.lang.String" mode="IN"/>
		<parameter property="b_content"	javaType="java.lang.String" mode="IN"/>
		<parameter property="b_date"	javaType="java.lang.String" mode="IN"/>
		<parameter property="b_hit"		javaType="int" mode="IN"/>
		<parameter property="b_group"	javaType="int" mode="IN"/>
		<parameter property="b_pos"		javaType="int" mode="IN"/>
		<parameter property="b_step"	javaType="int" mode="IN"/>
		<parameter property="b_pwd"		javaType="String" mode="IN"/>
  <!-- 
		B_NO       NUMBER(5),
		B_TITLE    VARCHAR2(200 BYTE),
		B_NAME     VARCHAR2(30 BYTE),
		B_CONTENT  VARCHAR2(4000 BYTE),
		B_DATE     VARCHAR2(20 BYTE),
		B_HIT      NUMBER(10)                         DEFAULT 0,
		B_GROUP    NUMBER(5)                          DEFAULT 0,
		B_POS      NUMBER(5)                          DEFAULT 0,
		B_STEP     NUMBER(5)                          DEFAULT 0,
		B_PWD      VARCHAR2(50 BYTE)
   -->
	</parameterMap>
	<!-- 자식테이블 VO 파라미터Map사전설정 -->
	<parameterMap id="pBSVO" type="com.vo.BoardSubVO">
		<parameter property="b_no"		javaType="int" mode="IN"/>
		<parameter property="b_seq"		javaType="int" mode="IN"/>
		<parameter property="b_file"	javaType="java.lang.String" mode="IN"/>
		<parameter property="b_img"		javaType="java.lang.String" mode="IN"/>
		<parameter property="b_size"	javaType="double" mode="IN"/><!-- 파일크기는 double -->
  <!-- 
		B_NO    NUMBER(5),
  		B_SEQ   NUMBER(5),
		B_FILE  VARCHAR2(100 BYTE),
		B_IMG   VARCHAR2(30 BYTE),
		B_SIZE  NUMBER(10,2)
   -->
	</parameterMap>
	
	<!-- VO클래스로 리턴받을 때 Map으로 받아서 반환함 -->
	<resultMap id="rBMVO" type="com.vo.BoardMasterVO">
		<id property="b_no"		column="b_no" /><!-- PK는 id -->
		<result property="b_title"		column="b_title" />
		<result property="b_name"		column="b_name" />
		<result property="b_content"	column="b_content" />
		<result property="b_date"		column="b_date" />
		<result property="b_hit"		column="b_hit" />
		<result property="b_group"		column="b_group" />
		<result property="b_pos"		column="b_pos" />
		<result property="b_step"		column="b_step" />
		<result property="b_pwd"		column="b_pwd" />
		<!-- 테이블의 부모자식 관계설정 -->
		<association property="bsVO"	resultMap="rBSVO" />
		<!-- getter와 setter가 생성되어있어야 부모테이블에 자식테이블을 주입받음 -->
	</resultMap>
	<resultMap id="rBSVO" type="com.vo.BoardSubVO">
		<id property="b_no"		column="b_no" /><!-- PK는 id -->
		<id property="b_seq"	column="b_seq" /><!-- PK는 id -->
		<result property="b_file"		column="b_file" />
		<result property="b_img"		column="b_img" />
		<result property="b_size"		column="b_size" />
	</resultMap>
<!-- ──────────────────────────────────────────────────────────────────────────── -->

<!-- 조회수를 카운트하는 쿼리문 -->
	<select id="totalCount" parameterType="int" resultType="int">
		SELECT count(*) total
		 FROM boardMaster bm, boardSub bs
		WHERE bm.b_no = bs.b_no(+) 	
	</select>
	<update id="hitUpdate" parameterType="map">
		update boardMaster
		   set b_hit = b_hit + 1
		 where b_no =#{b_no}
	</update>
	
	
<!-- 글 번호 채번하는 쿼리문 -->
	<select id="getBno" parameterType="map" resultType="int">
	SELECT seq_board_no.nextval
      FROM dual
	</select>
<!-- 그룹번호 채번하는 쿼리문 추가(새글쓰기에서 필요) -->
	<select id="getGroup" parameterType="map" resultType="int">
		SELECT
		     NVL((SELECT /*+index_desc(boardmastr BMASTER_NO_PK)*/ b_no
		            FROM boardmaster
		           WHERE rownum = 1
		             AND b_no > 0),0)+1 b_no
		  FROM dual
	</select>
	
	
<!-- 첨부파일이 있을때 파일 첨부하는 쿼리문 -->
	<insert id="boardMInsert" parameterMap="pBMVO"> <!-- parameterType="map"> -->
		INSERT INTO boardmaster(b_no, b_name, b_title, b_content
		                       ,b_group, b_pos, b_step
		                       ,b_date, b_pwd)
		                 VALUES(#{b_no}, #{b_name}, #{b_title}, #{b_content}
		                       ,#{b_group}, #{b_pos}, #{b_step}
		                       ,to_char(sysdate, 'YYYY-MM-DD'),#{b_pwd})
	</insert>
	<insert id="boardSInsert" parameterMap="pBSVO"> <!-- parameterType="map"> -->
		INSERT INTO boardsub(b_no, b_seq, b_file, b_img,b_size)
		                 VALUES(#{b_noS}, 1, #{b_file}, #{b_img},#{b_size})
	</insert>
	

<!-- 글 수정 처리하기(저장) -->
	<update id="boardMUpdate" parameterType="map">
		update boardMaster
		      set b_title = #{b_title}
		         ,b_name = #{b_name}
		         ,b_content = #{b_content}
		         ,b_pwd = #{b_pwd}
		  where b_no = #{b_no} 
	</update>
<!-- 글 수정 처리하기(저장시 첨부파일처리) -->
	<update id="boardSUpdate" parameterType="map">
		UPDATE boardSub
		   SET b_file = #{b_file}
			  ,b_size = #{b_size}
		 WHERE b_no = #{b_no} 
	</update>	


<!-- 글 삭제처리하기 -->
	<delete id="boardMDelete" parameterType="map">
		DELETE boardMaster
		 WHERE b_no = #{b_no} <!-- PK를 조건으로 걸어서 그 로우를 삭제 -->
	</delete>
<!-- 글 삭제처리할때 첨부파일이 있는경우 삭제하기 -->
	<delete id="boardSDelete" parameterType="map">
		DELETE boardSub
		 WHERE b_no = #{b_no} <!-- PK를 조건으로 걸어서 그 로우를 삭제 -->
	</delete>





	<update id="stepUpdate" parameterType="map">
		update boardMaster
		      set b_step = b_step+1
		  where b_group = #{b_group} <!-- 45(read.jsp) -->
		     and b_step > #{b_step}   <!-- 2(read.jsp)	 -->
	</update>
	
	
<!--
	한 업무에 테이블을 2개이상 사용해야할 때, 각각 입력,수정,삭제 처리 할 때는 parameterMap을 사용하는 것이 불편하지 않지만,
	JOIN의 경우에 JSON처리시에 bsVO가 들어오게 되어서 json처리를 별도로 2번 해야한다. ( 만약 테이블이 3개인 경우 3번 처리 )
	즉, map이 훨씬 편함 
 -->
	<select id="getBoardList" parameterType="map" resultType="map"><!-- resultMap="rBMVO"> -->
		SELECT
		      a.b_no, a.b_title, a.b_name, a.b_content
		     ,a.b_date, a.b_hit
		     ,NVL(a.b_file,'없음') b_file
		     ,a.b_pwd
		     ,a.b_group, a.b_pos, a.b_step, a.rno
		     ,DECODE(sign(a.b_size-1 )
		     			,1,a.b_size||'mb'
		     			,0,0||'mb'
		     			,-1,0||a.b_size||'mb') b_size
		  FROM (
		        SELECT
		              bm.b_no, bm.b_title, bm.b_name, bm.b_content
		             ,bm.b_date, bm.b_hit, NVL(bs.b_file,'없음') b_file, bm.b_pwd
		             ,bm.b_group, bm.b_pos, bm.b_step, rownum rno
		             ,bs.b_size
		         FROM boardMaster bm, boardSub bs
		        WHERE bm.b_no = bs.b_no(+)   
		       )a 
		<where>       
	 	<if test='b_no!=null'>
	     		AND a.b_no = #{b_no}
	 	</if>		
	 	<if test='cb_type != null and cb_type.equals("b_title")'>
	     		AND a.b_title LIKE '%'||#{sb_keyword}||'%'
	 	</if>		
	 	<if test='cb_type != null and cb_type.equals("b_content")'>
	     		AND a.b_content LIKE '%'||#{sb_keyword}||'%'
	 	</if>		
	 	<if test='cb_type != null and cb_type.equals("b_name")'>
	     		AND a.b_name LIKE '%'||#{sb_keyword}||'%'
	 	</if>	
	 	<if test='start>0'>
	 		<![CDATA[ AND a.rno >= #{start} ]]>
	 	</if>		
	 	<if test='end>0'>
	     	<![CDATA[ AND a.rno <= #{end} ]]>
	 	</if>	
	 	</where>
	 	ORDER BY a.b_group desc, a.b_step desc	
	</select>
	
	
<!-- 프로시저 적용해보기!! -->	
	<select id="proc_board_test" parameterType="com.vo.BoardMasterVO" statementType="CALLABLE">
		{ call proc_board_test(#{b_no}<!-- #{b_no, mode=IN, jdbcType=NUMERIC, javaType=int} -->
							  ,#{msg, mode=OUT, jdbcType=VARCHAR, javaType=String}
							  )<!-- VO클래스를 이용하는 경우, VO클래스에 IN,OUT속성에 해당하는 변수들을 선언해두고, getter/setter를 준비해야한다. -->
		}
	</select>
	
<!--
CREATE OR REPLACE PROCEDURE JSP.proc_board_test(pno IN number, msg OUT varchar2)
IS
    // 변수선언이 필요할 때, 이곳에서 선언
    v_no number(5) := 0; // 초기화
    v_name varchar2(30) := '';// 초기화
    CURSOR cur_board IS //커서 초기화
        SELECT b_no, b_name FROM BOARDMASTER
         WHERE b_no = pno; // 커서에 초기화될 SELECT쿼리
BEGIN
    //커서열기 ( 반드시 사용후 닫아줘야함 )
    OPEN cur_board;
    
    //반복문
    FOR i IN 1..3 LOOP
        //FETCH : 조회된 결과의 로우에 해당하는 각 컬럼에 커서를 올리는 명령어
        FETCH cur_board INTO v_no, v_name;
        //무한반복 방지코드 반드시 관리
        EXIT WHEN cur_board%NOTFOUND;//없으면 탈출하라.
    END LOOP;
    
    //커서닫기
    CLOSE cur_board;
    
    msg := '글번호는 '||v_no||'이고 , 작성자는 '||v_name||'입니다.';
END; 
 -->
	
	
	
<!-- 프로시저 커서를 VO타입으로 해보기 -->
	<select id="proc_board_test2" parameterType="map" resultMap="rBMVO" statementType="CALLABLE">
		{ call proc_board_test2(#{key, mode=OUT, jdbcType=CURSOR, javaType=java.sql.ResultSet, resultMap=rBMVO})}
	</select>
	<!-- 	[[ 프로시저의 커서를 다루어서 VO타입으로 결과를 받을때 사고과정 ]] 
			파라메터타입의 map으로 받은 것에 대하여 Map타입의 key로 대응하므로 {key} 알리아스를 넣어준다.
			OUT타입으로 프로시저에서 sys_refcursor로 지정된 파라메터는 OUT모드로 설정되어야 하고,
			DB에서 다루어진 커서는 마이바티스가 자바로 RS(ResultSet)으로 대응된다.
			이때, 프로시저의 호출 결과reuslt형태를 resultMap으로 했고 (resultType이 아님) 지정된 알리아스이름("rBMVO")으로 나가야하므로
			프로시저 OUT모드로 지정한 파라미터에 resultMap에도 같은 알리아스이름("rBMVO")이 설정되어야 익셉션이 발생하지 않는다. -->
<!-- 
CREATE OR REPLACE PROCEDURE JSP.proc_board_test2(b_cursor OUT sys_refcursor)
IS
BEGIN
    OPEN b_cursor FOR
        SELECT b_no, b_name, b_title FROM boardmaster;
END;
 -->
	
</mapper>
